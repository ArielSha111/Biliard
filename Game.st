'From Squeak5.3 of 25 January 2021 [latest update: #19458] on 7 June 2021 at 6:28:08 pm'!Morph subclass: #Game	instanceVariableNames: 'field_size board_size holes_arr balls_arr white_ball shade_board ball_size field num_of_balls num_of_holes all_stoped stick stick_drawed field_height field_width after_white_hit box need_to_set_white force ammount_of_steps color_arr deffult_force inserted_balls chamber'	classVariableNames: ''	poolDictionaries: ''	category: 'maman16'!!Game methodsFor: 'drawing' stamp: 'Ariel 6/1/2021 20:06'!drawBallsOn: afieldRect		self setWhiteBall: afieldRect.	self setColoredBalls: afieldRect.! !!Game methodsFor: 'drawing' stamp: 'Ariel 6/3/2021 16:03'!drawBoard| my_brown my_green frame_rect board_rect |my_green :=  Color r: 0.05 g: 0.5 b: 0.05.my_brown :=  Color r: 0.50 g: 0.20 b: 0.0.frame_rect :=Morph new.frame_rect cornerStyle: #rounded.frame_rect color: my_brown.frame_rect width: field_size.frame_rect height: field_size/1.8.board_rect :=Morph new.board_rect  cornerStyle: #rounded.board_rect color: my_green.board_rect width: board_size.board_rect height: board_size/1.9.board_rect addDropShadow.frame_rect addMorph: board_rect.board_rect center: frame_rect center. frame_rect addDropShadow.^ frame_rect.! !!Game methodsFor: 'drawing' stamp: 'Ariel 6/7/2021 03:23'!drawControlBox		self drawInsertedBalls.	self drawStick.	force := deffult_force.	box := ControlBox new.	box drawBox: self.	box position: self position + ((((self width)/2) - (125))@(self height)).	self addMorph: box.	! !!Game methodsFor: 'drawing' stamp: 'Ariel 6/7/2021 17:42'!drawHolesOn: aFrameRect	| hole1 hole2 hole3 hole4 hole5 hole6 delta_y |	delta_y :=6.	hole1 :=Hole new.	hole1 position: aFrameRect position + ((field_size/35)@(field_size/90)). 	hole1 width: board_size/25.	hole1 height: board_size/25.	hole1 color: Color black.			hole2 :=Hole new.	hole2 position: aFrameRect position + ((field_size - (field_size/1.87))@(field_size/90)). 	hole2 width: board_size/25.	hole2 height: board_size/25.	hole2 color: Color black.				hole3 :=Hole new.	hole3 position: aFrameRect position + ((field_size - (field_size/15))@(field_size/90)). 	hole3 width: board_size/25.	hole3 height: board_size/25.	hole3 color: Color black.			hole4 :=Hole new.	hole4 position: aFrameRect position + ((field_size/35)@((field_size/1.9)-(field_size/50))). 	hole4 width: board_size/25.	hole4 height: board_size/25.	hole4 color: Color black.			hole5 :=Hole new.	hole5 position: aFrameRect position + ((field_size - (field_size/1.87))@((field_size/1.9)-(field_size/50))). 	hole5 width: board_size/25.	hole5 height: board_size/25.	hole5 color: Color black.			hole6 :=Hole new.	hole6 position: aFrameRect position + ((field_size - (field_size/15))@((field_size/1.9)-(field_size/50))). 	hole6 width: board_size/25.	hole6 height: board_size/25.	hole6 color: Color black.			hole1 position: hole1 position + (0@delta_y).	hole2 position: hole2 position + (0@delta_y).	hole3 position: hole3 position + (0@delta_y).		delta_y := (-1* delta_y).	hole4 position: hole4 position + (0@delta_y).	hole5 position: hole5 position + (0@delta_y).	hole6 position: hole6 position + (0@delta_y).	holes_arr at:1 put:hole1.	holes_arr at:2 put:hole2.	holes_arr at:3 put:hole3.	holes_arr at:4 put:hole4.	holes_arr at:5 put:hole5.	holes_arr at:6 put:hole6.		aFrameRect addMorph: hole1.	aFrameRect addMorph: hole2.	aFrameRect addMorph: hole3.	aFrameRect addMorph: hole4.	aFrameRect addMorph: hole5.	aFrameRect addMorph: hole6.	! !!Game methodsFor: 'drawing' stamp: 'Ariel 6/7/2021 03:48'!drawInsertedBalls	| cur_ball |	chamber delete.	(inserted_balls = nil)	ifFalse:		[			chamber := Morph new.			chamber color: Color veryLightGray.			chamber position: (self position) + ((self width)@(0)).			chamber width: ball_size.			chamber height: (ball_size * (inserted_balls size) ).			self addMorph:chamber.			1 to: (inserted_balls size) do:			[				: i |				cur_ball := inserted_balls at: i.				cur_ball position: (self position) + ((self width)@(ball_size * (i-1))).				chamber addMorph: cur_ball.			]		].! !!Game methodsFor: 'drawing' stamp: 'Ariel 6/3/2021 01:30'!drawStick	stick := Stick new.	stick stick_length: field_size/2.	stick white_ball:white_ball.	stick draw.	stick_drawed :=true.! !!Game methodsFor: 'seting' stamp: 'Ariel 6/6/2021 23:26'!setColoredBalls: afieldRect	| ball positions_arr cur_color cur_ball |		positions_arr := self getBallsLocations: afieldRect.	1 to: num_of_balls do: 	[		:i |		(i = 5)		ifFalse:			[				ball :=ColoredBall new.				cur_color := (color_arr at:i).				ball color: (cur_color).			]		ifTrue:[ball :=BlackBall new.].		ball ball_size: ball_size.		ball addDropShadow.		ball set_ball_num:i.		ball center: (positions_arr at: i). 		balls_arr at:i put: ball copy.		afieldRect addMorph: (balls_arr at:i) .	].	white_ball balls_arr: balls_arr.	1 to: num_of_balls do: 	[		: i |		cur_ball := (balls_arr at: i). 		cur_ball balls_arr: balls_arr.	]! !!Game methodsFor: 'seting' stamp: 'Ariel 6/6/2021 04:26'!setWhiteBall: aFrameRect	| frame_center_point  |		frame_center_point := aFrameRect center.		white_ball delete.		white_ball := WhiteBall new.		white_ball center: (frame_center_point - ((field_size/3)@0)). 		white_ball ball_size: ball_size.		white_ball step_count:1.		white_ball color: Color white.		white_ball addDropShadow.		aFrameRect addMorph: white_ball.! !!Game methodsFor: 'actions' stamp: 'Ariel 6/6/2021 19:31'!createColorArr	color_arr at:1 put: (Color green).	color_arr at:2 put: (Color orange).	color_arr at:3 put: (Color red).	color_arr at:4 put: (Color blue).	color_arr at:5 put: (Color black).	color_arr at:6 put: (Color yellow).	color_arr at:7 put: (Color magenta).	color_arr at:8 put: (Color darkGray).	color_arr at:9 put: (Color brown).	color_arr at:10 put: (Color lightMagenta).	color_arr at:11 put: (Color lightBrown).	color_arr at:12 put: (Color lightGreen).	color_arr at:13 put: (Color lightBlue).	color_arr at:14 put: (Color lightRed).	color_arr at:15 put: (Color lightGray).	! !!Game methodsFor: 'actions' stamp: 'Ariel 6/2/2021 18:08'!moveABall: aBall	aBall move.! !!Game methodsFor: 'actions' stamp: 'Ariel 6/6/2021 16:54'!moveAllMovableBalls	| cur_ball |		white_ball move.		1 to: num_of_balls do:	[		: i |		cur_ball := (balls_arr at: i).		(cur_ball isMoving)		ifTrue:[cur_ball move].	].! !!Game methodsFor: 'checking' stamp: 'Ariel 6/5/2021 00:37'!checkBall: aBall	| cur_ball |	1 to: num_of_balls do:	[		: i |		cur_ball := balls_arr at: i.		(cur_ball = aBall)		ifFalse:			[											(cur_ball gotHit: aBall)				ifTrue:				[					self createHit2_a: aBall b: cur_ball.					aBall can_get_hit: false.					cur_ball can_get_hit: false.				]			].	]	! !!Game methodsFor: 'checking' stamp: 'Ariel 6/6/2021 04:18'!checkBalls	| cur_ball |		self checkBall:white_ball.	1 to: num_of_balls do:	[		 : i |		cur_ball := (balls_arr at:i).		(cur_ball isMoving)		ifTrue:		[			self checkBall: cur_ball.		]	].1 to: num_of_balls do:	[		 : i |		cur_ball := (balls_arr at:i).		cur_ball can_get_hit: true.	].	! !!Game methodsFor: 'checking' stamp: 'Ariel 6/7/2021 03:35'!checkHoles	| temp_hole bol cur_ball |		1 to: num_of_holes do:		[			: i |			temp_hole := holes_arr at:i.			bol := temp_hole checkHole: white_ball.			(bol)			ifTrue:			[				white_ball step_count:0.				white_ball delete.				need_to_set_white :=true			].		].		1 to: num_of_balls do:		[			: i |			cur_ball := (balls_arr at:i).						1 to: num_of_holes do:			[				: j |				temp_hole := holes_arr at:j.				bol := temp_hole checkHole: cur_ball.				(bol)				ifTrue:					[						inserted_balls add:cur_ball.						cur_ball position: (-100@100).						cur_ball step_count:0.											].			].		]! !!Game methodsFor: 'checking' stamp: 'Ariel 6/6/2021 04:11'!checkIfAllStoped	| cur_ball |	((white_ball step_count) > 1)	ifTrue:		[^false].		1 to: num_of_balls do:	[		: i |		cur_ball := (balls_arr at: i).		((cur_ball step_count) > 1)		ifTrue:			[^false].	].^true.! !!Game methodsFor: 'checking' stamp: 'Ariel 6/3/2021 20:20'!checkWalls	| cur_ball |	self checkWalls: white_ball.	1 to: num_of_balls do:	[		 : i |		cur_ball := (balls_arr at:i).		(cur_ball isMoving)		ifTrue:[self checkWalls: cur_ball.].	].! !!Game methodsFor: 'checking' stamp: 'Ariel 6/7/2021 17:46'!checkWalls: aBall		| field_top_left_point field_x field_y ball_center_point ball_x ball_y delta |	"add in initialize"		field_top_left_point := (field topLeft).		field_x := (field_top_left_point x).		field_y := (field_top_left_point y).	"until here"		ball_center_point :=aBall center.	ball_x := (ball_center_point x).	ball_y := (ball_center_point y).	delta :=1.90.	(ball_y < (field_y + (ball_size*delta)))	ifTrue:[aBall reverseYAngle].	(ball_y >( field_y- (ball_size*delta) + field_height))	ifTrue:[aBall reverseYAngle].	(ball_x < (field_x + (ball_size*delta)))	ifTrue:[aBall reverseXAngle].	(ball_x >( field_x- (ball_size*delta) + field_width))	ifTrue:[aBall reverseXAngle].! !!Game methodsFor: 'calculations' stamp: 'Ariel 6/4/2021 00:25'!getAngle_a: point_a b: point_b	| x1 x2 y1 y2 denominator m numerator |	x1 := point_a x.	x2 := point_b x.	y1 := point_a y.	y2 := point_b y.		numerator :=(y2-y1).	(numerator = 0)	ifTrue:[^ 0.].	denominator :=(x2-x1).	(denominator = 0)	ifTrue:[^ 50.]."it will be the steepest angle possible"	m :=(numerator)/(denominator).	m := (m abs)."because y is opposite in the first the hinges"	^m.! !!Game methodsFor: 'calculations' stamp: 'Ariel 6/3/2021 23:44'!isAbove_a: point_a b:point_b	| y1 y2 |	y1 := point_a y.	y2 := point_b y.	(y1<y2)	ifTrue:[^true].	^false.! !!Game methodsFor: 'calculations' stamp: 'Ariel 6/3/2021 23:23'!isLeft_a: point_a b:point_b	| x1 x2 |	x1 := point_a x.	x2 := point_b x.	(x1<x2)	ifTrue:[^true].	^false.! !!Game methodsFor: 'geting' stamp: 'Ariel 6/5/2021 19:42'!getBallsLocations: afieldRect	| field_center_point positions_arr middle_field_x middle_field_y x y |		field_center_point := afieldRect center.	positions_arr := Array new: num_of_balls. 		middle_field_x := field_size/2.	middle_field_y := field_size/3.8.		x:=middle_field_x*1.3.		y:=middle_field_y.		positions_arr at:1 put:((x)@(y)).			x:=(((middle_field_x*1.3) + (ball_size + 1 ))).		y:=(middle_field_y - (ball_size/2)).		positions_arr at:2 put:((x)@(y)).				y:=(middle_field_y + (ball_size/2)).		positions_arr at:3 put:((x)@(y)).					x:=(((middle_field_x*1.3) + ((ball_size*2)+ 1 ))).		y:=middle_field_y - ball_size.		positions_arr at:4 put:((x)@(y)).		y:=middle_field_y.		positions_arr at:5 put:((x)@(y)).				y:=middle_field_y + ball_size.		positions_arr at:6 put:((x)@(y)).			x:=(((middle_field_x*1.3) + ((ball_size*3)+ 1 ))).		y:=(middle_field_y - (ball_size*1.5)).		positions_arr at:7 put:((x)@(y)).		y:=(middle_field_y - (ball_size/2)).		positions_arr at:8 put:((x)@(y)).		y:=(middle_field_y + (ball_size/2)).		positions_arr at:9 put:((x)@(y)).		y:=(middle_field_y +(ball_size*1.5)).		positions_arr at:10 put:((x)@(y)).			x:=(((middle_field_x*1.3) + ((ball_size*4)+ 1 ))).		y:=(middle_field_y - (ball_size*2)).		positions_arr at:11 put:((x)@(y)).		y:=middle_field_y - ball_size.		positions_arr at:12 put:((x)@(y)).		y:=(middle_field_y).		positions_arr at:13 put:((x)@(y)).		y:=middle_field_y + ball_size.		positions_arr at:14 put:((x)@(y)).		y:=(middle_field_y + (ball_size*2)).		positions_arr at:15 put:((x)@(y)).		^positions_arr.! !!Game methodsFor: 'hits' stamp: 'Ariel 6/7/2021 03:01'!createHit2_a: anObject1 b: anObject2		| b_center m a_center step_count step_delta |		a_center :=anObject1 center.		b_center :=anObject2 center.					(anObject2 x_step: (anObject2 step_size)).				m := self getAngle_a: (a_center) b:(b_center).				(m >= 50)		ifTrue:			[				anObject2 y_step: (anObject2 x_step).				anObject2 x_step: 0.			]		ifFalse:[anObject2 y_step:((anObject2 x_step) * m).].				((self isAbove_a: a_center b: b_center))		ifTrue:[anObject2 y_angle:(1)]		ifFalse:[anObject2 y_angle:(-1)].		((self isLeft_a: a_center b: b_center))		ifTrue:[anObject2 x_angle:(1)]		ifFalse:[anObject2 x_angle:(-1)].				anObject1 reverseXAngle.				step_delta := 15.		step_count := step_delta + (anObject1 step_count) * 0.7.		anObject2 step_count: step_count.				step_count := (anObject1 step_count) * 0.25.		anObject1 step_count: step_count.				anObject2 canMove.								! !!Game methodsFor: 'hits' stamp: 'Ariel 6/7/2021 03:09'!createHit_a: anObject1 b: anObject2		| b_center m a_center |		a_center :=anObject1 center.		b_center :=anObject2 center.					(anObject2 x_step: (anObject2 step_size)).				m := self getAngle_a: (a_center) b:(b_center).		(m >= 30)		ifTrue:			[				anObject2 y_step: (anObject2 x_step).				anObject2 x_step: 0.			]		ifFalse:[anObject2 y_step:((anObject2 x_step) * m).].				((self isAbove_a: a_center b: b_center))		ifTrue:[anObject2 y_angle:(1)]		ifFalse:[anObject2 y_angle:(-1)].		((self isLeft_a: a_center b: b_center))		ifTrue:[anObject2 x_angle:(1)]		ifFalse:[anObject2 x_angle:(-1)].				anObject2 step_count: force * ammount_of_steps.		anObject2 canMove.										! !!Game methodsFor: 'hits' stamp: 'Ariel 6/4/2021 15:38'!firstHit		self setWhiteBall:field.		self setHit.	! !!Game methodsFor: 'hits' stamp: 'Ariel 6/4/2021 00:43'!hitWhite	stick hitBall.! !!Game methodsFor: 'box-functions' stamp: 'Ariel 6/6/2021 19:49'!exit	self delete.! !!Game methodsFor: 'box-functions' stamp: 'Ariel 6/7/2021 03:59'!restartTable	| self_position |	self_position := self position.	chamber delete.	inserted_balls := OrderedCollection new.	self delete.	self initialize.	self position: self_position.! !!Game methodsFor: 'box-functions' stamp: 'Ariel 6/5/2021 17:40'!rotateDown		stick rotateDown.		! !!Game methodsFor: 'box-functions' stamp: 'Ariel 6/3/2021 00:20'!rotateStick	stick rotateUp.! !!Game methodsFor: 'box-functions' stamp: 'Ariel 6/5/2021 01:10'!rotateUp		stick rotateUp.		! !!Game methodsFor: 'box-functions' stamp: 'Ariel 6/6/2021 21:55'!setForceHigh		force := (deffult_force*1.5).! !!Game methodsFor: 'box-functions' stamp: 'Ariel 6/6/2021 21:55'!setForceLow	force :=(deffult_force*0.5)! !!Game methodsFor: 'box-functions' stamp: 'Ariel 6/6/2021 21:53'!setForceMedium	force :=8! !!Game methodsFor: 'box-functions' stamp: 'Ariel 6/5/2021 01:17'!setHit				self createHit_a:stick b: white_ball.		stick clear.		box delete.		after_white_hit :=true.		! !!Game methodsFor: 'updating' stamp: 'Ariel 6/6/2021 16:56'!updateTable				1 to: force do:		[			: i |			self moveAllMovableBalls.			self checkHoles. 			self checkWalls.			self checkBalls. 		].		(self checkIfAllStoped)		ifTrue:		[			(need_to_set_white)			ifTrue:			[				need_to_set_white :=false.				self setWhiteBall: field			].			after_white_hit := false.			self drawControlBox.		].	! !!Game methodsFor: 'stepping' stamp: 'Ariel 6/5/2021 00:57'!step	(after_white_hit)	ifTrue:[self updateTable.]	! !!Game methodsFor: 'stepping' stamp: 'Ariel 6/5/2021 00:41'!stepTime	^1! !!Game methodsFor: 'initialize-release' stamp: 'Ariel 6/7/2021 04:05'!initializesuper initialize.force :=5.deffult_force := 8.board_size:= 1000.field_size:= board_size*1.1.num_of_holes :=6.num_of_balls:=15.ammount_of_steps :=200.after_white_hit := false.holes_arr := Array new: num_of_holes.balls_arr := Array new: num_of_balls.color_arr := Array new: num_of_balls.self createColorArr.white_ball :=CircleMorph new.	    			self  cornerStyle: #rounded.self color: Color black.self width: field_size+50.self height: (field_size+100)/1.9.self addDropShadow.			shade_board :=self.ball_size :=  board_size/27.field:=self drawBoard.field_height := field height.field_width := field width.self drawHolesOn: field.self drawBallsOn: field.	self addMorph: field.field center: self center. chamber := Morph new.self drawControlBox.need_to_set_white := false.inserted_balls := OrderedCollection new.  self openInWorld.! !